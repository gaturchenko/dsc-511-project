-- UNCOMMENT LINES 29, 30, 322-381 TO OBTAIN DESIRED OUTPUT FOR A SINGLE EVENT

DECLARE D_1, D_3, D_5, D_7, SESSION_LENGTH, YEAR_INSTALLED INT64;
DECLARE AD_REVENUE_PER_SEC_USD FLOAT64;
DECLARE EVENTS, KEYS ARRAY <STRING>;
SET (D_1, D_3, D_5, D_7, SESSION_LENGTH, YEAR_INSTALLED) = (1, 3, 5, 7, 90, 2018);
SET AD_REVENUE_PER_SEC_USD = 0.0001;
SET EVENTS = [
  'user_engagement',
  'ad_reward',
  'challenge_a_friend',
  'challenge_accepted',
  'spend_virtual_currency',
  'post_score',
  'level_complete',
  'level_retry',
  'level_fail',
  'level_reset',
  'level_end',
  'use_extra_steps',
  'no_more_extra_steps'
];
SET KEYS = [
  'engagement_time_msec',
  'value',
  'firebase_screen_id',
  'level_name'
];

-- WITH main_subq AS(
--   WITH breakdown_subq AS(
    WITH activity_subq AS(
      SELECT
        user_pseudo_id,
        -- DATE(
        --   TIMESTAMP_MICROS(user_first_touch_timestamp)
        -- ) AS first_touch_date,
        DATE(
          MIN(
            TIMESTAMP_MICROS(event_timestamp)
          )
        ) AS activity_day
      FROM
        `firebase-public-project.analytics_153293282.events_*`
      -- WHERE
      --   EXTRACT(YEAR FROM DATE(
      --     TIMESTAMP_MICROS(user_first_touch_timestamp)
      --   )) = 2018
        -- user_pseudo_id = '023A2DB99CC3F70A4B71869C36952D74'
      GROUP BY
        user_pseudo_id,
        -- first_touch_date,
        DATE(TIMESTAMP_MICROS(event_timestamp))
    )
    SELECT
      *,
      1 + DATE_DIFF(
        activity_day,
        first_touch_date,
        DAY
      ) AS day_after_launch,

      CASE
        WHEN 1 + DATE_DIFF(
          activity_day,
          first_touch_date,
          DAY
        ) <= D_1 THEN 1
        ELSE 0
      END AS d_1,

      CASE
        WHEN 1 + DATE_DIFF(
          activity_day,
          first_touch_date,
          DAY
        ) > D_1
        AND
        1 + DATE_DIFF(
          activity_day,
          first_touch_date,
          DAY
        ) <= D_3 THEN 1
        ELSE 0
      END AS d_3,

      CASE
        WHEN 1 + DATE_DIFF(
          activity_day,
          first_touch_date,
          DAY
        ) > D_3
        AND
        1 + DATE_DIFF(
          activity_day,
          first_touch_date,
          DAY
        ) <= D_5 THEN 1
        ELSE 0
      END AS d_5,

      CASE
        WHEN 1 + DATE_DIFF(
          activity_day,
          first_touch_date,
          DAY
        ) > D_5
        AND
        1 + DATE_DIFF(
          activity_day,
          first_touch_date,
          DAY
        ) <= D_7 THEN 1
        ELSE 0
      END AS d_7

    FROM activity_subq
    LEFT JOIN (
      SELECT
        * EXCEPT(activity_day),
        MIN(activity_day) AS first_touch_date
      FROM
        activity_subq
      GROUP BY
        user_pseudo_id
    )
    USING (user_pseudo_id)
    -- ORDER BY day_after_launch
    -- AS activity_table
    RIGHT JOIN(
      WITH session_subq AS (
        SELECT
          first_touch_date,
          traffic_source,
          os,
          country,
          user_pseudo_id,
          event_name,
          event_timestamp,
          event_value,
          event_key,
          screen_class,
          score_value,
          -- SUM(is_new_session) OVER (ORDER BY user_pseudo_id, event_timestamp) AS global_session_id,
          SUM(is_new_session) OVER (PARTITION BY user_pseudo_id ORDER BY event_timestamp) AS user_session_id
        FROM(
          SELECT
          *,
          CASE WHEN
            TIMESTAMP_DIFF(event_timestamp, previous_event_timestamp, MINUTE) >= 90
            OR previous_event_timestamp IS NULL
          THEN 1
          ELSE 0
          END AS is_new_session
          FROM
            (
              SELECT
                first_touch_date,
                traffic_source.medium AS traffic_source,
                device.operating_system AS os,
                geo.country AS country,
                user_pseudo_id,
                event_name,
                event_param.value.string_value AS screen_class,
                event_param.value.int_value AS event_value,
                event_param.value.double_value AS score_value,
                event_param.key AS event_key,
                TIMESTAMP_MICROS(event_timestamp) AS event_timestamp,
                TIMESTAMP_MICROS(
                  LAG(event_timestamp) OVER
                    (PARTITION BY user_pseudo_id ORDER BY event_timestamp) 
                ) AS previous_event_timestamp
              FROM
                `firebase-public-project.analytics_153293282.events_*`,
                UNNEST(event_params) AS event_param              
              LEFT JOIN (
                SELECT
                  * EXCEPT(activity_day),
                  MIN(activity_day) AS first_touch_date
                FROM
                  activity_subq
                GROUP BY
                  user_pseudo_id
              )
              USING (user_pseudo_id)
            ) LAST
          -- WHERE
            -- user_pseudo_id = '023A2DB99CC3F70A4B71869C36952D74'
            ORDER BY user_pseudo_id, SUM(is_new_session) OVER (PARTITION BY user_pseudo_id ORDER BY event_timestamp)
        )
      )
        ,event_data_subq AS (
            SELECT
            user_pseudo_id,
            user_session_id,
            traffic_source,
            os,
            country,
            first_touch_date,
            DATE(
              MIN(
                event_timestamp
              )
            ) AS activity_day,

            COALESCE(
              CASE
                WHEN event_name = 'user_engagement' AND event_key = 'engagement_time_msec' THEN SUM(CAST(event_value AS NUMERIC))/1000
              END
            ) AS session_user_engagement_sec,

            COALESCE(
              CASE
                WHEN event_name = 'ad_reward' AND event_key = 'value' THEN COUNT(event_value)
              END
            ) AS session_claimed_ad_rewards,

            COALESCE(
              CASE
                WHEN event_name = 'challenge_a_friend' AND event_key = 'firebase_screen_id' THEN COUNT(event_value)
              END
            ) AS session_challenged_friend,

            COALESCE(
              CASE
                WHEN event_name = 'challenge_accepted' AND event_key = 'firebase_screen_id' THEN COUNT(event_value)
              END
            ) AS session_was_challenged,

            COALESCE(
              CASE
                WHEN event_name = 'post_score' AND event_key = 'level_name' THEN COUNT(score_value)
              END 
            ) AS session_played_levels,

            COALESCE(
              CASE
                WHEN event_name = 'level_complete' AND event_key = 'level_name' THEN COUNT(screen_class)
              END 
            ) AS session_completed_levels,

            COALESCE(
              CASE
                WHEN event_name = 'level_retry' AND event_key = 'level_name' THEN COUNT(screen_class)
              END 
            ) AS session_retried_levels,

            COALESCE(
              CASE
                WHEN event_name = 'level_fail' AND event_key = 'level_name' THEN COUNT(screen_class)
              END
            ) AS session_failed_levels,

            COALESCE(
              CASE
                WHEN event_name = 'level_reset' AND event_key = 'level_name' THEN COUNT(screen_class)
              END
            ) AS session_reseted_levels,

            COALESCE(
              CASE
                WHEN event_name = 'level_end' AND event_key = 'level_name' THEN COUNT(screen_class)
              END
            ) AS session_ended_levels,

            COALESCE(
              CASE
                WHEN event_name = 'use_extra_steps' AND event_key = 'value' THEN COUNT(event_value)
              END
            ) AS session_used_extra_steps,

            COALESCE(
              CASE
                WHEN event_name = 'no_more_extra_steps' AND event_key = 'value' THEN COUNT(event_value)
              END
            ) AS session_no_more_extra_steps

          FROM
            session_subq
          WHERE
            -- user_pseudo_id = '023A2DB99CC3F70A4B71869C36952D74' AND
            (event_name IN UNNEST(EVENTS) AND event_key IN UNNEST(KEYS)) AND
            EXTRACT(YEAR FROM first_touch_date) = YEAR_INSTALLED
          GROUP BY
            user_pseudo_id,
            traffic_source,
            os,
            country,
            first_touch_date,
            DATE(event_timestamp),
            user_session_id,
            event_name,
            event_key
          -- ORDER BY user_session_id
        )
      SELECT
        user_pseudo_id,
        user_session_id,
        traffic_source,
        os,
        country,
        first_touch_date,
        activity_day,
        SUM(session_user_engagement_sec) AS session_user_engagement_sec,
        SUM(session_claimed_ad_rewards) AS session_claimed_ad_rewards,
        SUM(session_challenged_friend) AS session_challenged_friend,
        SUM(session_was_challenged) AS session_was_challenged,
        SUM(session_completed_levels) AS session_played_levels,
        SUM(session_completed_levels) AS session_completed_levels,
        SUM(session_retried_levels) AS session_retried_levels,
        SUM(session_failed_levels) AS session_failed_levels,
        SUM(session_reseted_levels) AS session_reseted_levels,
        SUM(session_ended_levels) AS session_ended_levels,
        SUM(session_used_extra_steps) AS session_used_extra_steps,
        SUM(session_no_more_extra_steps) AS session_no_more_extra_steps
      FROM event_data_subq
      GROUP BY
        user_pseudo_id,
        user_session_id,
        traffic_source,
        os,
        country,
        first_touch_date,
        activity_day
      ORDER BY
        user_session_id
    )
    USING (
      user_pseudo_id,
      first_touch_date,
      activity_day
    )
    WHERE
      traffic_source IS NOT NULL
      AND os IS NOT NULL
      AND country IS NOT NULL
      AND traffic_source = '{traffic_source}'
      AND country = '{country}'
      AND os = '{os}'
      AND FORMAT_DATETIME("%Y-%m-%d", first_touch_date) = '{date}'
    ORDER BY
      user_pseudo_id,
      user_session_id;
--   )
--   SELECT
--     first_touch_date,
--     traffic_source,
--     os,
--     country,
--     d_1,
--     d_3,
--     d_7,
--     ,
--     CASE
--       WHEN d_1 = 1 THEN SUM(session_user_engagement_sec)
--       ELSE 0
--     END AS session_user_engagement_sec_d_1,
--     CASE
--       WHEN d_3 = 1 THEN SUM(session_user_engagement_sec)
--       ELSE 0
--     END AS session_user_engagement_sec_d_3,
--     CASE
--       WHEN d_3 = 1 THEN SUM(session_user_engagement_sec)
--       ELSE 0
--     END AS session_user_engagement_sec_d_5,
--     CASE
--       WHEN d_7 = 1 THEN SUM(session_user_engagement_sec)
--       ELSE 0
--     END AS session_user_engagement_sec_d_7,
--     CASE
--       WHEN  = 1 THEN SUM(session_user_engagement_sec)
--       ELSE 0
--     END AS session_user_engagement_sec_
--   FROM
--     breakdown_subq
--   GROUP BY
--     first_touch_date,
--     traffic_source,
--     os,
--     country,
--     d_1,
--     d_3,
--     d_7,
--     
-- )
-- SELECT
--   first_touch_date,
--   traffic_source,
--   os,
--   country,
  
--   SUM(session_user_engagement_sec_d_1) AS session_user_engagement_sec_d_1,
--   SUM(session_user_engagement_sec_d_3) AS session_user_engagement_sec_d_3,
--   SUM(session_user_engagement_sec_d_5) AS session_user_engagement_sec_d_5,
--   SUM(session_user_engagement_sec_d_7) AS session_user_engagement_sec_d_7,
--   SUM(session_user_engagement_sec_) AS session_user_engagement_sec_
-- FROM
--   main_subq
-- GROUP BY
--   first_touch_date,
--   traffic_source,
--   os,
--   country